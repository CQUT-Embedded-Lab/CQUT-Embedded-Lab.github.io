{"categories":[{"title":"LabTask","uri":"https://CQUT-Embedded-Lab.github.io/categories/labtask/"},{"title":"嵌入式","uri":"https://CQUT-Embedded-Lab.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"}],"posts":[{"content":"51基础任务书 一、任务书 1、任务描述  学习51相关知识，完成基于51迷宫小车的双轮差速控制。  2、要求  能够读懂原理图，理解软件与硬件如何产生关联 掌握51的一些基本知识 掌握51中流水灯与矩阵键盘等基本IO操作 掌握51中的硬件外设，如中断、定时器、串口等 理解步进电机的工作原理 实现迷宫小车步进电机控制与实时双轮差速控制  3、完成时间  1-2周  二、具体计划 1、阶段1 1.1、工作安排  任务沟通 了解51的基本概念  1.2、期望结果  了解任务内容 理解51开发板的基本组成结构 形成51单片机的基本认知  1.3、建议完成时间  +1day  2、阶段2 2.1、工作安排  结合原理图与代码，理解软硬件的交互逻辑  2.2、期望结果  可以实现单片机端口/引脚的电平输入与输出 掌握位运算的基本概念与代码编写 应用LED灯、蜂鸣器、数码管、键盘等IO型设备  2.3、建议完成时间  +2day  3、阶段3 3.1、工作安排  了解51的硬件外设，中断及定时器  3.2、期望结果  掌握中断触发流程，多级中断概念 掌握定时器的基本工作流程，了解定时器溢出原理 代码实现外部中断，控制LED亮灭 代码实现定时器中断，控制LED亮灭  3.3、建议完成时间  +3day  4、阶段4 4.1、工作安排  了解51的硬件外设，串口  4.2、期望结果  了解串口通信的工作原理 掌握串口的基本接收/发送工作流程 代码实现串口的接收和发送  4.3、建议完成时间  +4day  5、阶段5 5.1、工作安排  理解步进电机的工作原理 掌握迷宫小车上步进电机的驱动方法  5.2、期望结果  了解步进电机的基本组成 了解四相八拍的具体含义 参考指导书上的代码使电机转动  5.3、建议完成时间  +5day  6、阶段6 6.1、工作安排  利用51提供的功能（定时器中断），完成两个步进电机的分时控制  6.2、期望结果  两个电机可以“同时”以不同速度运行 可支持百分比调速，调速精度达到us级 必须有输入功能，可以利用串口或按键实现  6.3、建议完成时间  +7day  ","id":0,"section":"posts","summary":"51基础任务书 一、任务书 1、任务描述 学习51相关知识，完成基于51迷宫小车的双轮差速控制。 2、要求 能够读懂原理图，理解软件与硬件如何产生关联","tags":["c51"],"title":"任务书1—51基础","uri":"https://CQUT-Embedded-Lab.github.io/2021/09/task1_51basic/","year":"2021"},{"content":"32基础任务书 一、任务书 1、任务描述  学习32相关知识 相关资料：  Clion+STM32CubeMX使用指南    2、要求  了解32与51的区别 了解32中的时钟分配原理 了解cubemx的使用方法及HAL库 掌握32中LED灯与按键等基本IO操作 掌握32中的中断控制原理，例如外部中断以及定时器中断 掌握32中的定时器功能，如定时器中断、输入捕获、输出比较 掌握32中的串口功能  3、完成时间  1-2周  二、具体计划  MOOC：基于STM32CubeMX和HAL驱动库的嵌入式系统设计  ","id":1,"section":"posts","summary":"32基础任务书 一、任务书 1、任务描述 学习32相关知识 相关资料： Clion+STM32CubeMX使用指南 2、要求 了解32与51的区别 了解32","tags":["stm32"],"title":"任务书2—32基础","uri":"https://CQUT-Embedded-Lab.github.io/2021/09/task2_32basic/","year":"2021"},{"content":"51迷宫小车任务书 一、任务书 1、任务描述  完成迷宫小车的相关功能，使之可遍历迷宫、可寻路。  2、要求  能够通过5组红外传感器识别迷宫环境 能够使小车准确完成前进、左转、修正等基本动作 调用虚拟驱动接口，在虚拟迷宫中完成迷宫的遍历及最优路径 使小车在实际迷宫中完成遍历及最优路径 进阶1：实现其他寻路算法，如A* 进阶2：通过wifi组网实现多机联调  3、完成时间  2-3周  二、具体计划 1、阶段1 1.1、工作安排  任务沟通 参考指导书了解迷宫小车概念  1.2、期望结果  了解任务内容  1.3、建议完成时间  +0day-周一-第二周  2、阶段2 2.1、工作安排  参考指导书完成迷宫小车红外检测  2.2、期望结果  了解红外检测基本原理 代码实现单组红外检测，注意有坑 代码实现多组红外检测，配合蜂鸣器完成环境的探测  2.3、建议完成时间  +1day-周二-第二周  3、阶段3 3.1、工作安排  参考指导书完成迷宫小车基本动作  3.2、期望结果  小车可以实现前进，左/右转等基本操作 小车可以在无障碍条件下完成标准的前进一格，左转90度 小车可以利用红外传感器完成路线的修正  3.3、建议完成时间  +2day-周三-第二周  4、阶段4（非暑期培训可从此开始） 4.1、工作安排  参考指导书了解小车在迷宫中的定位原理 了解绝对方向与相对方向概念  4.2、期望结果  理解小车在迷宫中的坐标记录及方向的转换 通过具体案例描述小车的坐标及方向推理 构思绝对方向转相对方向的方法  4.3、建议完成时间  +3day-周四-第二周  5、阶段5 5.1、工作安排  搭建虚拟迷宫，掌握两种虚拟驱动接口 接口1：返回相对方向上的红外信息 接口2：朝相对方向做一次动作  5.2、期望结果  可以理解虚拟接口的意义，并思考如何实现真正的驱动 可以调用虚拟接口模拟小车的简单运动  5.3、建议完成时间  +4day-周五-第二周  6、阶段6（难点） 6.1、工作安排  在虚拟环境中完成迷宫遍历  6.2、期望结果  参考指导书，实现对迷宫信息的记录（将每个格子周围墙的信息记录到数组中） 难点：参考DFS算法，实现基于迷宫信息的移动策略（每次小车该走哪个方向） 得到一个方向后，虚拟小车可以完成相应的动作 充分利用内存空间，防止后续移植到真实小车上出现空间不足的问题  6.3、建议完成时间  +7day-周一-第三周  7、阶段7（难点） 7.1、工作安排  在虚拟迷宫中实现最优路径  7.2、期望结果  参考BFS算法，得出迷宫的等高表 依据等高表，得出起点到终点的最短路径 依据最短路径，可以使虚拟小车完成最短路径的运行  7.3、建议完成时间  +9day-周三-第三周  8、阶段8 8.1、工作安排  根据接口定义，完成真实小车的驱动 在真实迷宫中调试真实小车，使之完成规定任务  8.2、期望结果  虚拟驱动与真实驱动表现一致，符合接口标准 完成真实小车的调试，并录制最终视频  8.3、建议完成时间  +14day-周一-第四周  9、阶段9（进阶1） 9.1、工作安排  实现更多寻路算法，如A*  9.2、期望结果  在虚拟环境中完成算法测试 在真实环境中测试算法  9.3、建议完成时间  +Nday  10、阶段10（进阶2） 10.1、工作安排  实现多机联调  10.2、期望结果  了解wifi组网与esp8266-STA模式原理 完成esp8266与迷宫小车串口调试 实现利用Python-socket接收多个节点的数据 实现控制中枢，协调多机运转 实现多机联调，跑迷宫  10.3、建议完成时间  +Nday  ","id":2,"section":"posts","summary":"51迷宫小车任务书 一、任务书 1、任务描述 完成迷宫小车的相关功能，使之可遍历迷宫、可寻路。 2、要求 能够通过5组红外传感器识别迷宫环境 能够使小车","tags":["c51","Maze"],"title":"任务书3—51迷宫小车","uri":"https://CQUT-Embedded-Lab.github.io/2021/09/task3_51maze-cart/","year":"2021"},{"content":"32全向移动小车任务书 一、任务书 1、任务描述  实现32小车的全向移动控制，可以通过串口向小车发出控制指令 相关资料（不建议刚开始就看源码）：  stm32底盘驱动 多线程C/S模型(Socket) Python+ESP8266+stm32数据传输 使用frp实现内网穿透    2、要求  掌握直流编码电机的控制与调速方法 实现闭环控制模型：增量式PI控制器 实现麦克纳姆轮的全向移动运动学建模 实现通过串口向小车发出控制指令 理解TCP/IP通信原理，使用pyhton-socket实现与esp8266的网络通信 实现局域网控制小车的全向移动  3、完成时间  1-2周  二、具体计划 1、阶段1 1.1、工作安排  驱动直流电机转动  1.2、期望结果  了解L289N的工作原理 尝试直接对L298N供电使直流电机转动 掌握直流电机的正转与反转  1.3、建议完成时间  +1day  2、阶段2 2.1、工作安排  直流电机的PWM调速  2.2、期望结果  理解PWM及用于直流电机调速的原理 利用stm32输出PWM，并通过示波器观察波形 将stm32输出的PWM接入L298N，并使其驱动电机 通过改变PWM占空比实现电机调速  2.3、建议完成时间  +2day  3、阶段3 3.1、工作安排  直流电机闭环控制  3.2、期望结果  了解为什么要闭环控制及其基本原理 了解直流编码电机中编码器的定义 使用stm32定时器中的输入捕获或编码器模式获取电机编码值 了解增量式PI控制器，利用编码值与PWM完成单个电机的闭环控制  3.3、建议完成时间  +3day  4、阶段4 4.1、工作安排  全向移动运动学建模  4.2、期望结果  输入x、y、z方向速度，输出4个电机各自的速度 将模型推广为绝对方向的控制  4.3、建议完成时间  +4day  5、阶段5（难点） 5.1、工作安排  通过网络+串口的方式控制小车移动  5.2、期望结果  制定串口通讯协议，例如[, x, y, z, ]，并实现 了解eps8266的原理与sta模式，并实现其与实验室内网的网络连接 学习源码C/S模型（Socket）与Python+ESP8266+stm32数据传输，了解tcp网络通信基本过程 Note：部分源码可能是基于FreeRTOS的设计，只关心某个任务即可  5.3、建议完成时间  +5day  6、阶段6 6.1、工作安排  编写简单上位机程序，实现遥控  6.2、期望结果  可以通过键盘输入控制小车移动 满足项目总体要求  6.3、建议完成时间  +6day  7、阶段7 7.1、工作安排  总结项目  7.2、期望结果  输出技术文档一份  7.3、建议完成时间  +7day  ","id":3,"section":"posts","summary":"32全向移动小车任务书 一、任务书 1、任务描述 实现32小车的全向移动控制，可以通过串口向小车发出控制指令 相关资料（不建议刚开始就看源码）： st","tags":["stm32","Omnidirectional","TCP/IP","Python"],"title":"任务书4—32全向移动小车","uri":"https://CQUT-Embedded-Lab.github.io/2021/09/task4_32omnidirectional-mobile-trolley/","year":"2021"},{"content":"ROS机器人任务书 一、任务书 1、任务描述  搭建基础ROS环境，实现数据与视频传输 参考资料：  AUTOLABOR资料    2、要求  Ubuntu版本：18.04，ROS版本：melodic 实现机器人与数据与视频传输 调用接口实现基于激光雷达的SLAM  3、完成时间  1-2周  二、具体计划 1、阶段1 1.1、工作安排  搭建Ubuntu虚拟机及ROS环境 参考资料：  虚拟机安装流程：略 ROS-melodic官方安装流程 HelloWorld例程    1.2、期望结果  使用VMWarePlayer与Ubuntu18.04镜像，搭建虚拟机环境 在Ubuntu18.04上搭建ROS-melodic系统 实现HelloWorld例程  1.3、建议完成时间  +1day  2、阶段2 2.1、工作安排  了解ROS架构及文件系统  2.2、期望结果  参考资料第一章  2.3、建议完成时间  +2day  3、阶段3 3.1、工作安排  掌握Pub与Sub的通信模式，实现数据传输  3.2、期望结果  参考资料第二章  3.3、建议完成时间  +3day  4、阶段4 4.1、工作安排  了解usb_cam包，实现视频传输  4.2、期望结果  了解usb_cam发布的N种话题及其区别 使用rosrun image_view观察图像 使用rostopic测试各节点带宽  4.3、建议完成时间  +4day  5、阶段5 5.1、工作安排  了解ROS多机通信，实现内网环境下的ROS配置  5.2、期望结果  为树莓派安装Ubuntu18.04及ROS-melodic系统 完成ROS-Master等配置 实现主机与子机的通信  5.3、建议完成时间  +5day  6、阶段6 6.1、工作安排  查找相关资料，实现基于激光雷达的SLAM  6.2、期望结果  了解实验室现存激光雷达的型号 下载相应的pkg，并运行例程 输出模拟图像  6.3、建议完成时间  +6day  7、阶段7 7.1、工作安排  总结项目  7.2、期望结果  输出技术文档一份  7.3、建议完成时间  +7day  ","id":4,"section":"posts","summary":"ROS机器人任务书 一、任务书 1、任务描述 搭建基础ROS环境，实现数据与视频传输 参考资料： AUTOLABOR资料 2、要求 Ubuntu版本：18","tags":["stm32","ROS-melodic","Ubuntu18.04"],"title":"任务书5—ROS机器人基础","uri":"https://CQUT-Embedded-Lab.github.io/2021/09/task5_rosrobot/","year":"2021"},{"content":"PX4无人机任务书 一、任务描述  了解四轴飞行器相关知识 真机调试具有一定危险性，所以我也不打算出具具体任务计划，只提供相关资料  主控：CUAV-PixhackV2 固件：PX4 地面站：QGroundControl    ","id":5,"section":"posts","summary":"PX4无人机任务书 一、任务描述 了解四轴飞行器相关知识 真机调试具有一定危险性，所以我也不打算出具具体任务计划，只提供相关资料 主控：CUAV-P","tags":["stm32","PX4","MAVLink"],"title":"任务书6—PX4无人机","uri":"https://CQUT-Embedded-Lab.github.io/2021/09/task6_px4drone/","year":"2021"},{"content":"迷宫小车之禅 一、万事开头难 ——绝对方向和相对方向\n1、之前java迷宫移动一格  以坐标化的形式描述移动 [row, col]: [0, 0] -\u0026gt; [0, 1]      2、小车移动一格  以方向化的形式描述移动 [绝对方向]: 起始点 -\u0026gt; 前进一步 在本例中，实现这种移动只需要使小车前进一步即可      3、存在一个问题  小车的朝向似乎也是影响移动的因素 [绝对方向]：起始点 -\u0026gt; 右转90° -\u0026gt; 前进一步      4、问题的推广（相对方向的引出）  小车以任意起始方向存在于迷宫任意位置     为方便表示，我们定义相对方向：  0：直行 1：右转 2：掉头 3：左转   得出迷宫移动的转换关系表     可以观察到，起始方向与期望方向一致时，小车只需直行即可。但是当方向不一致的，首先需要调转小车的朝向，然后直行。 所以问题的重点就在于如何协调小车第一步的决策  当然你可以把这16种情况直接写到程序中，每次判断即可 但是这种情况存在一种计算公式    5、绝对方向 -\u0026gt; 相对方向的转换   定义\n absD：起始方向（绝对方向） absD_t：期望方向（绝对方向） relD：小车相对方向    公式 $$ relD=(absD_t-absD)\\pmod4 $$\n  函数\n  unsigned char abs_to_rel(unsigned char absD, unsigned char absD_t){\r//absD：当前绝对方向\r//absD_t：期望转换到哪个绝对方向\runsigned char relD = (absD_t - absD) % 4;\rif(relD \u0026gt; 127)\trelD += 4;\r//返回相对方向\rreturn relD;\r}\r 6、使用案例  起始方向：1 期望方向：0 relD = abs_to_rel(1, 0); 小车相对方向为3，执行左转，之后前进      二、到底朝哪个方向走 ——小车行进策略（遍历阶段）\n1、只是为了走到终点  “右手法则”，只适用于终点在边缘的迷宫      2、遍历整个迷宫，延续之前java的思路  绝对方向从0-\u0026gt;3扫描，一看到没墙就走，failed     走过的路不应该再走，failed     真没路的时候果断回溯      3、明确判断策略  决定方向的两个依据  是否有墙 是否走过   4个方向都有墙或者都走过  回溯    4、配合这种策略，最终它会回到起点，终于跑完了？  还有最优路径呢  三、爬山和下山 ——基于BFS的最优路径查找\n1、BFS过程    void bfs(){\r// step1：起点入队\rwhile(!isEmpty(queue)){\r// step2：a出队\rfor(int i=0; i\u0026lt;4; i++){\r// step3：判断a周围的信息，依次入队\r// step4：刷新这个点的高度 }\r// step5：高度+1\r}\r}\r 2、等高表     3、信息在哪？  需要在遍历的时候就收集好  四、内存吃紧，效率吃紧 ——迷宫数组+栈、等高表+队列存储优化\n1、迷宫数组+栈 1.1、墙与路  java迷宫，char数组，甚至是int数组（51内存不够）  更高效的存储方法  一个char里面有些啥  可以用低4位表示一个格子墙的信息   例子（疯狂使用位运算）  unsigned char block = 0b00001010;     1.2、如何判断走过？如何确定回溯方向？  判断走过：把这个迷宫数组高四位置1 确定回溯方向：迷宫数组高四位直接存来的方向 双赢  2、等高表+队列  你们可以尝试的优化点，我按老路子来的  8*8等高表存高度 长度64的缓存队列    五、总结 ——一个简单的框架\nvoid proc(){\rwhile(1){\r// step1：刷新信息（方向转换+高低四位）\r// step2：确定方向（有没有墙+走没有过）\r// step3：开始执行（方向转换）\r}\r}\r ","id":6,"section":"posts","summary":"迷宫小车之禅 一、万事开头难 ——绝对方向和相对方向 1、之前java迷宫移动一格 以坐标化的形式描述移动 [row, col]: [0, 0] -\u0026gt; [0, 1] 2、小车移动一格 以方向化的形","tags":["C51"],"title":"迷宫小车之禅","uri":"https://CQUT-Embedded-Lab.github.io/2021/09/the-zen-of-the-labyrinth-car/","year":"2021"}],"tags":[{"title":"c51","uri":"https://CQUT-Embedded-Lab.github.io/tags/c51/"},{"title":"MAVLink","uri":"https://CQUT-Embedded-Lab.github.io/tags/mavlink/"},{"title":"Maze","uri":"https://CQUT-Embedded-Lab.github.io/tags/maze/"},{"title":"Omnidirectional","uri":"https://CQUT-Embedded-Lab.github.io/tags/omnidirectional/"},{"title":"PX4","uri":"https://CQUT-Embedded-Lab.github.io/tags/px4/"},{"title":"Python","uri":"https://CQUT-Embedded-Lab.github.io/tags/python/"},{"title":"ROS-melodic","uri":"https://CQUT-Embedded-Lab.github.io/tags/ros-melodic/"},{"title":"stm32","uri":"https://CQUT-Embedded-Lab.github.io/tags/stm32/"},{"title":"TCP/IP","uri":"https://CQUT-Embedded-Lab.github.io/tags/tcp/ip/"},{"title":"Ubuntu18.04","uri":"https://CQUT-Embedded-Lab.github.io/tags/ubuntu18.04/"}]}